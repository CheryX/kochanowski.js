import schemasRegex from "./regex";

export interface Token {
  name: string;
  values: string[];
}

/**
 * This function checks all schemas generated by schemasRegex and looks for matches.
 * If no match is found the function returns "not_found" as a name with no values.
 * 
 * **Examples:**
 * 
 * - `Zdefiniuj zmienną o nazwie Hatsune Miku o wartości równej くれわ` -> `{ name: 'create', values: [ 'Hatsune Miku', 'くれわ' ] }`
 * - `Przypisz wartość くれわ zmiennej o nazwie Hatsune Miku` -> `{ name: 'assign_alt', values: [ 'くれわ', 'Hatsune Miku' ] }`
 * 
 * @param pattern Given KPL line
 * @returns Interpreted information about given line
 */
export function getPatternValues(pattern: string): Token {
  for (const schemaName in schemasRegex) {
    const regex = schemasRegex[schemaName];
    const match = pattern.match(regex);

    if (match) {
      return {
        name: schemaName,
        values: match.slice(1) // Remove object types in an array + first element
      }
    }
  }

  return {
    name: "not_found",
    values: [pattern]
  }
}
